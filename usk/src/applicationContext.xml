<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"  
	
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">



	<import resource="classpath*:config/**.xml" />



	<context:annotation-config></context:annotation-config>

	<!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 如果需要 扫描其他包新建context -->
	<context:component-scan base-package="com.wssys"></context:component-scan>

	<!-- 如果需要其他包扫描下面 加这个 -->
	<!-- <context:component-scan base-package="com.hjpt"></context:component-scan> -->

	<mvc:annotation-driven></mvc:annotation-driven>

	<context:property-placeholder location="classpath:config.properties"></context:property-placeholder>

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource"
		p:basename="Messages">
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}"
		p:username="${jdbc.username}" p:password="${jdbc.password}">
	</bean>

	<!-- jdbc注入 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.autoReconnect">${hibernate.autoReconnect}</prop>
				<prop key="hibernate.connection.provider_class">org.hibernate.connection.C3P0ConnectionProvider
				</prop>
				<!-- 每次都验证连接是否可用 -->
				<prop key="hibernate.c3p0.validate">true</prop>
				<!-- 保持最小的连接数 -->
				<prop key="hibernate.c3p0.min_size">50</prop>
				<!-- 每隔120秒检查连接池里的空闲连接 ，单位是秒 -->
				<prop key="hibernate.c3p0.idle_test_period">120</prop>
				<!-- 最大连接数 -->
				<prop key="hibernate.c3p0.max_size">100</prop>
				<!-- 当连接池里面的连接用完的时候，C3P0一下获取的新的连接数 -->
				<prop key="hibernate.c3p0.acquire_increment">10</prop>
				<!-- 链接池的生存周期 -->
				<prop key="hibernate.c3p0.timeout">5000</prop>
				<!-- 每次获取连接的数量 -->
				<prop key="hibernate.c3p0.acquire_increment">5</prop>
				<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
					如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
				<prop key="hibernate.c3p0.max_statements">50</prop>
				<!--Batch Size是设定对数据库进行批量删除，批量更新和批量插入的时候的批次大小，有点相当于设置Buffer缓冲区大小的意思 -->
				<prop key="hibernate.jdbc.batch_size">25</prop>
			</props>
		</property>
		<!-- 扫描实体类 -->
		<property name="packagesToScan" value="com.wssys.entity"></property>
	</bean>


	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory">
	</bean>



<!-- 	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
	<property name="supportedMediaTypes">
	<list>
	<value>text/plain;charset=UTF-8</value>
	</list>
	</property>
	</bean>  -->

<!-- 解决 @ResponseBody 返回中文乱码 -->
 <!--<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">    
        <property name="messageConverters">    
            <list>    
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">    
                    <property name="supportedMediaTypes">    
                        <list>  
                            <value>text/html;charset=UTF-8</value>  
                        </list>    
                    </property>    
                </bean>    
            </list>    
        </property>    
    </bean>  -->
    
<import resource="classpath:net/bull/javamelody/monitoring-spring-aspectj.xml" /> 
    <!-- 性能监控 -->   <!--正则表达式-->
  <bean id= "facadeMonitoringAdvisor" class="net.bull.javamelody.MonitoringSpringAdvisor" >  
         <property name ="pointcut" >  
                 <bean class="org.springframework.aop.support.JdkRegexpMethodPointcut" >  
                         <property name ="pattern" value="org.melody.*.*.service.*" /><!--正则表达式-->
                 </bean>  
         </property> 
</bean>  


  <!-- aop -->
  <bean id="logService" class="com.wssys.framework.LogService"></bean>

   <!-- 启动对@AspectJ注解的支持  -->
   <aop:aspectj-autoproxy proxy-target-class="true" />
		 <!-- <aop:config>  
       <aop:aspect ref="logService">  
       </aop:aspect>  
   </aop:config> -->


	<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

</beans>